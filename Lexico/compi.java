/* Generated By:JavaCC: Do not edit this line. compi.java */
package Lexico;
public class compi implements compiConstants {

  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPARITMETICO:
      case OPRELACIONAL:
      case OPLOGICO:
      case ASIGNACION:
      case INCREMENTO:
      case DECREMENTO:
      case COMPBITS:
      case OPTERNARIO:
      case APUNTADOR:
      case OPFUSIONNULA:
      case LAMBDA:
      case PARIZQ:
      case PARDER:
      case LLAVEIZQ:
      case LLAVEDER:
      case CORIZQ:
      case CORDER:
      case PUNTOS:
      case FINLINEA:
      case COMILLAS:
      case COMENTARIO:
      case IF:
      case SINO:
      case ELSIF:
      case SWITCH:
      case CASE:
      case FINCASE:
      case CICLO:
      case NUMERO:
      case TIPODATO:
      case NULO:
      case VALOR_BOOLEANO:
      case FUNCION:
      case CLASE:
      case VALOR_OBJETO:
      case TIPO_INTERFAZ:
      case TIPO_DELEGADO:
      case GLOBAL:
      case IO:
      case RETORNO:
      case ITERACION:
      case PRUEBA:
      case ATRAPADOR:
      case COMPARADOR:
      case ABRIR_ARCHIVO:
      case LEER_ARCHIVO:
      case LEER_LINEA:
      case ESCRIBIR:
      case ESCRIBIR_LINEA:
      case IMPRIMIR:
      case EJECUCION:
      case ERROR_EXCEPCION:
      case ERROR_BLOQUEO:
      case ERROR_FINALIZACION:
      case SELECTOR:
      case METODO_DESDE:
      case METODO_TIPO:
      case VALOR_DE_OBJETO:
      case NUEVO:
      case BIBLIOTECA:
      case IMPORTAR_BIBLIOTECA:
      case ABSTRACCION:
      case GET:
      case SET:
      case THROW:
      case PUNTERO:
      case MOD_ABSTRAC:
      case SUPER:
      case PARAMETROS:
      case TIPO_METODO:
      case ESTATICO:
      case VALOR:
      case INPUT:
      case EVENTO:
      case REFERENCIA:
      case COMPROBAR:
      case DESCOMPROBAR:
      case SINCRONIZAR:
      case CORRER:
      case IGNORAR:
      case START:
      case REMOVE:
      case CLEAR:
      case REVERSE:
      case COPIAR:
      case MAXIMO:
      case MINIMO:
      case SUMAR:
      case DETENER:
      case PAUSAR:
      case SUSPENDER:
      case ADJUNTAR:
      case EXTENDER:
      case INSERTAR:
      case MODMATH:
      case HEIGHT:
      case WIDTH:
      case LEFT:
      case RIGHT:
      case TOP:
      case INDICE:
      case TAG:
      case BOTTOM:
      case CONTAR:
      case ORDENAR:
      case TIEMPO:
      case ALEATORIO:
      case CLOSE:
      case BUSCAR:
      case RENOMBRAR:
      case FUNCMAT:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPARITMETICO:
        jj_consume_token(OPARITMETICO);
        break;
      case OPRELACIONAL:
        jj_consume_token(OPRELACIONAL);
        break;
      case OPLOGICO:
        jj_consume_token(OPLOGICO);
        break;
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case INCREMENTO:
        jj_consume_token(INCREMENTO);
        break;
      case DECREMENTO:
        jj_consume_token(DECREMENTO);
        break;
      case OPFUSIONNULA:
        jj_consume_token(OPFUSIONNULA);
        break;
      case OPTERNARIO:
        jj_consume_token(OPTERNARIO);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case NUEVO:
        jj_consume_token(NUEVO);
        break;
      case COMPBITS:
        jj_consume_token(COMPBITS);
        break;
      case APUNTADOR:
        jj_consume_token(APUNTADOR);
        break;
      case LAMBDA:
        jj_consume_token(LAMBDA);
        break;
      case PARIZQ:
        jj_consume_token(PARIZQ);
        break;
      case PARDER:
        jj_consume_token(PARDER);
        break;
      case LLAVEIZQ:
        jj_consume_token(LLAVEIZQ);
        break;
      case LLAVEDER:
        jj_consume_token(LLAVEDER);
        break;
      case CORIZQ:
        jj_consume_token(CORIZQ);
        break;
      case CORDER:
        jj_consume_token(CORDER);
        break;
      case PUNTOS:
        jj_consume_token(PUNTOS);
        break;
      case FINLINEA:
        jj_consume_token(FINLINEA);
        break;
      case COMILLAS:
        jj_consume_token(COMILLAS);
        break;
      case COMENTARIO:
        jj_consume_token(COMENTARIO);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case SINO:
        jj_consume_token(SINO);
        break;
      case ELSIF:
        jj_consume_token(ELSIF);
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        break;
      case CASE:
        jj_consume_token(CASE);
        break;
      case FINCASE:
        jj_consume_token(FINCASE);
        break;
      case CICLO:
        jj_consume_token(CICLO);
        break;
      case TIPODATO:
        jj_consume_token(TIPODATO);
        break;
      case NULO:
        jj_consume_token(NULO);
        break;
      case VALOR_BOOLEANO:
        jj_consume_token(VALOR_BOOLEANO);
        break;
      case FUNCION:
        jj_consume_token(FUNCION);
        break;
      case CLASE:
        jj_consume_token(CLASE);
        break;
      case VALOR_OBJETO:
        jj_consume_token(VALOR_OBJETO);
        break;
      case TIPO_INTERFAZ:
        jj_consume_token(TIPO_INTERFAZ);
        break;
      case TIPO_DELEGADO:
        jj_consume_token(TIPO_DELEGADO);
        break;
      case GLOBAL:
        jj_consume_token(GLOBAL);
        break;
      case IO:
        jj_consume_token(IO);
        break;
      case RETORNO:
        jj_consume_token(RETORNO);
        break;
      case ITERACION:
        jj_consume_token(ITERACION);
        break;
      case PRUEBA:
        jj_consume_token(PRUEBA);
        break;
      case ATRAPADOR:
        jj_consume_token(ATRAPADOR);
        break;
      case COMPARADOR:
        jj_consume_token(COMPARADOR);
        break;
      case ABRIR_ARCHIVO:
        jj_consume_token(ABRIR_ARCHIVO);
        break;
      case LEER_ARCHIVO:
        jj_consume_token(LEER_ARCHIVO);
        break;
      case LEER_LINEA:
        jj_consume_token(LEER_LINEA);
        break;
      case ESCRIBIR:
        jj_consume_token(ESCRIBIR);
        break;
      case ESCRIBIR_LINEA:
        jj_consume_token(ESCRIBIR_LINEA);
        break;
      case IMPRIMIR:
        jj_consume_token(IMPRIMIR);
        break;
      case EJECUCION:
        jj_consume_token(EJECUCION);
        break;
      case ERROR_EXCEPCION:
        jj_consume_token(ERROR_EXCEPCION);
        break;
      case ERROR_BLOQUEO:
        jj_consume_token(ERROR_BLOQUEO);
        break;
      case ERROR_FINALIZACION:
        jj_consume_token(ERROR_FINALIZACION);
        break;
      case SELECTOR:
        jj_consume_token(SELECTOR);
        break;
      case METODO_DESDE:
        jj_consume_token(METODO_DESDE);
        break;
      case METODO_TIPO:
        jj_consume_token(METODO_TIPO);
        break;
      case VALOR_DE_OBJETO:
        jj_consume_token(VALOR_DE_OBJETO);
        break;
      case BIBLIOTECA:
        jj_consume_token(BIBLIOTECA);
        break;
      case IMPORTAR_BIBLIOTECA:
        jj_consume_token(IMPORTAR_BIBLIOTECA);
        break;
      case ABSTRACCION:
        jj_consume_token(ABSTRACCION);
        break;
      case GET:
        jj_consume_token(GET);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case THROW:
        jj_consume_token(THROW);
        break;
      case PUNTERO:
        jj_consume_token(PUNTERO);
        break;
      case MOD_ABSTRAC:
        jj_consume_token(MOD_ABSTRAC);
        break;
      case SUPER:
        jj_consume_token(SUPER);
        break;
      case PARAMETROS:
        jj_consume_token(PARAMETROS);
        break;
      case TIPO_METODO:
        jj_consume_token(TIPO_METODO);
        break;
      case ESTATICO:
        jj_consume_token(ESTATICO);
        break;
      case VALOR:
        jj_consume_token(VALOR);
        break;
      case INPUT:
        jj_consume_token(INPUT);
        break;
      case EVENTO:
        jj_consume_token(EVENTO);
        break;
      case REFERENCIA:
        jj_consume_token(REFERENCIA);
        break;
      case COMPROBAR:
        jj_consume_token(COMPROBAR);
        break;
      case DESCOMPROBAR:
        jj_consume_token(DESCOMPROBAR);
        break;
      case SINCRONIZAR:
        jj_consume_token(SINCRONIZAR);
        break;
      case CORRER:
        jj_consume_token(CORRER);
        break;
      case IGNORAR:
        jj_consume_token(IGNORAR);
        break;
      case START:
        jj_consume_token(START);
        break;
      case REMOVE:
        jj_consume_token(REMOVE);
        break;
      case CLEAR:
        jj_consume_token(CLEAR);
        break;
      case REVERSE:
        jj_consume_token(REVERSE);
        break;
      case COPIAR:
        jj_consume_token(COPIAR);
        break;
      case MAXIMO:
        jj_consume_token(MAXIMO);
        break;
      case MINIMO:
        jj_consume_token(MINIMO);
        break;
      case SUMAR:
        jj_consume_token(SUMAR);
        break;
      case DETENER:
        jj_consume_token(DETENER);
        break;
      case PAUSAR:
        jj_consume_token(PAUSAR);
        break;
      case SUSPENDER:
        jj_consume_token(SUSPENDER);
        break;
      case ADJUNTAR:
        jj_consume_token(ADJUNTAR);
        break;
      case EXTENDER:
        jj_consume_token(EXTENDER);
        break;
      case INSERTAR:
        jj_consume_token(INSERTAR);
        break;
      case MODMATH:
        jj_consume_token(MODMATH);
        break;
      case HEIGHT:
        jj_consume_token(HEIGHT);
        break;
      case WIDTH:
        jj_consume_token(WIDTH);
        break;
      case LEFT:
        jj_consume_token(LEFT);
        break;
      case RIGHT:
        jj_consume_token(RIGHT);
        break;
      case TOP:
        jj_consume_token(TOP);
        break;
      case INDICE:
        jj_consume_token(INDICE);
        break;
      case TAG:
        jj_consume_token(TAG);
        break;
      case BOTTOM:
        jj_consume_token(BOTTOM);
        break;
      case CONTAR:
        jj_consume_token(CONTAR);
        break;
      case ORDENAR:
        jj_consume_token(ORDENAR);
        break;
      case TIEMPO:
        jj_consume_token(TIEMPO);
        break;
      case ALEATORIO:
        jj_consume_token(ALEATORIO);
        break;
      case CLOSE:
        jj_consume_token(CLOSE);
        break;
      case BUSCAR:
        jj_consume_token(BUSCAR);
        break;
      case RENOMBRAR:
        jj_consume_token(RENOMBRAR);
        break;
      case FUNCMAT:
        jj_consume_token(FUNCMAT);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void Inicio() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTAR_BIBLIOTECA:
      Llamarpaquete();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    ClasePrincipal();
  }

  static final public void Llamarpaquete() throws ParseException {
    jj_consume_token(IMPORTAR_BIBLIOTECA);
    jj_consume_token(BIBLIOTECA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FINLINEA);
  }

  static final public void ClasePrincipal() throws ParseException {
    jj_consume_token(CLASE);
    jj_consume_token(IDENTIFICADOR);
    BloquePrincipal();
  }

  static final public void BloquePrincipal() throws ParseException {
    jj_consume_token(PARIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_METODO:
      jj_consume_token(TIPO_METODO);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    MetodoPrincipal();
    Bloque();
    jj_consume_token(PARDER);
  }

  static final public void MetodoPrincipal() throws ParseException {
    jj_consume_token(METODO);
    jj_consume_token(120);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
  }

  static final public void Bloque() throws ParseException {
    jj_consume_token(LLAVEIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPODATO:
      Declaracion();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      Operacion();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(LLAVEDER);
  }

  static final public void Declaracion() throws ParseException {
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
    Asignar();
    jj_consume_token(FINLINEA);
  }

  static final public void Asignar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 121:
      jj_consume_token(121);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMILLAS:
        jj_consume_token(COMILLAS);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IDENTIFICADOR:
      Operacion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMILLAS:
        jj_consume_token(COMILLAS);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(FINLINEA);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Operacion() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(121);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OPARITMETICO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FINLINEA);
  }

  static final public void declaracionGlobal() throws ParseException {
    jj_consume_token(GLOBAL);
    jj_consume_token(IDENTIFICADOR);
    Asignar();
    jj_consume_token(FINLINEA);
  }

  static final public void CuerpoFuncion() throws ParseException {
    jj_consume_token(FUNCION);
    jj_consume_token(IDENTIFICADOR);
    ParamFuncion();
    BloqueFuncion();
  }

  static final public void ParamFuncion() throws ParseException {
    jj_consume_token(PARIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPODATO:
      VariableFuncion();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(PARDER);
  }

  static final public void VariableFuncion() throws ParseException {
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
    MasVariableFuncion();
  }

  static final public void MasVariableFuncion() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 122:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_2;
      }
      jj_consume_token(122);
      jj_consume_token(IDENTIFICADOR);
    }
  }

  static final public void BloqueFuncion() throws ParseException {
    jj_consume_token(LLAVEIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPODATO:
      Declaracion();
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      Operacion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(RETORNO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FINLINEA);
    jj_consume_token(LLAVEDER);
  }

  static final public void CuerpoIF() throws ParseException {
    jj_consume_token(IF);
    Argumento();
    Bloque();
  }

  static final public void Argumento() throws ParseException {
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPRELACIONAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARDER);
  }

  static final public void CuerpoSino() throws ParseException {
    jj_consume_token(SINO);
    Bloque();
  }

  static final public void CuerpoELSIF() throws ParseException {
    jj_consume_token(ELSIF);
    Argumento();
    Bloque();
  }

  static final public void CuerpoMientras() throws ParseException {
    jj_consume_token(123);
    Argumento();
    jj_consume_token(THEN);
    Bloque();
  }

  static final public void CuerpoFor() throws ParseException {
    jj_consume_token(124);
    ArgumentoFor();
    jj_consume_token(THEN);
    Bloque();
  }

  static final public void ArgumentoFor() throws ParseException {
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(121);
    jj_consume_token(NUMERO);
    jj_consume_token(FINLINEA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPRELACIONAL);
    jj_consume_token(NUMERO);
    jj_consume_token(FINLINEA);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
      jj_consume_token(INCREMENTO);
      break;
    case DECREMENTO:
      jj_consume_token(DECREMENTO);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpresionLambda() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(121);
    jj_consume_token(LAMBDA);
    ArgumentoLambda();
    expresion();
    jj_consume_token(FINLINEA);
  }

  static final public void ArgumentoLambda() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    MasID();
    jj_consume_token(APUNTADOR);
  }

  static final public void MasID() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 122:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_4;
      }
      jj_consume_token(122);
      jj_consume_token(IDENTIFICADOR);
    }
  }

  static final public void expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OPARITMETICO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffc0,0xffffffc0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffbfff,0xffffbfff,0x0,0x0,0x8,0x0,0x0,0x4,0x0,0x0,0x4,0x4,0x8,0x0,0x8,0x0,0x4,0x0,0x0,0x4,0x4,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,0x8,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffefff,0xffefff,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,0x2800000,0x800000,0x800000,0x0,0x4000000,0x0,0x800000,0x800000,0x0,0x4000000,0x800000,0x800000,};
   }

  /** Constructor with InputStream. */
  public compi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compi(compiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[125];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 125; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
