/* Generated By:JavaCC: Do not edit this line. compiTokenManager.java */
package Lexico;

/** Token Manager. */
public class compiTokenManager implements compiConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x830200000000000L) != 0L || (active1 & 0x24000000220000L) != 0L)
         {
            jjmatchedKind = 119;
            return 30;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 6;
            return 266;
         }
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 119;
            return 69;
         }
         if ((active1 & 0x400804L) != 0L)
         {
            jjmatchedKind = 119;
            return 203;
         }
         if ((active0 & 0x4000000010000L) != 0L)
         {
            jjmatchedKind = 119;
            return 51;
         }
         if ((active0 & 0x8001400000000000L) != 0L || (active1 & 0x2000000000180L) != 0L)
         {
            jjmatchedKind = 119;
            return 191;
         }
         if ((active1 & 0x400000010L) != 0L)
         {
            jjmatchedKind = 119;
            return 102;
         }
         if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 23;
            return -1;
         }
         if ((active0 & 0x8010000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 119;
            return 124;
         }
         if ((active0 & 0x20008000000L) != 0L || (active1 & 0x1000008008L) != 0L)
         {
            jjmatchedKind = 119;
            return 81;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 119;
            return 134;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 6;
            return 6;
         }
         if ((active0 & 0x600000030000000L) != 0L || (active1 & 0x800010000L) != 0L)
         {
            jjmatchedKind = 118;
            return 187;
         }
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 9;
            return 267;
         }
         if ((active1 & 0x1007fe3ff884000L) != 0L)
         {
            jjmatchedKind = 119;
            return 48;
         }
         if ((active0 & 0x2808080000000L) != 0L || (active1 & 0x8800000040000L) != 0L)
         {
            jjmatchedKind = 119;
            return 250;
         }
         if ((active0 & 0xc0000000000000L) != 0L || (active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            return 22;
         }
         if ((active0 & 0x5000004000000000L) != 0L || (active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            return 155;
         }
         if ((active0 & 0x20000L) != 0L)
            return 14;
         if ((active0 & 0x2000000040000000L) != 0L || (active1 & 0x11000000102440L) != 0L)
         {
            jjmatchedKind = 119;
            return 235;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 119;
            return 129;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 119;
            return 45;
         }
         return -1;
      case 1:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 190;
         }
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 154;
         }
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 21;
         }
         if ((active0 & 0x600000000000000L) != 0L || (active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 268;
         }
         if ((active0 & 0x8000000L) != 0L)
            return 48;
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 234;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 249;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 180;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 138;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 269;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 29;
         }
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x1000008000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 48;
         }
         if ((active0 & 0xb0fe69c1f0010000L) != 0L || (active1 & 0x13b7fe7fffb4ffeL) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 48;
         }
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 1;
            return 252;
         }
         return -1;
      case 2:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
            return 159;
         }
         if ((active0 & 0x1040000000000L) != 0L || (active1 & 0x240070220062L) != 0L)
            return 48;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
            return 248;
         }
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0xfefe6bd1f0010000L) != 0L || (active1 & 0x13fdbff8fddef9dL) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
            return 48;
         }
         return -1;
      case 3:
         if ((active0 & 0xc20c405090000000L) != 0L || (active1 & 0x13112088500100L) != 0L)
            return 48;
         if ((active0 & 0x3cf2ab8160010000L) != 0L || (active1 & 0x12ccadf078dee9dL) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
            return 48;
         }
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 3;
            return 19;
         }
         return -1;
      case 4:
         if ((active0 & 0xcc2008120000000L) != 0L || (active1 & 0x88a830281c484L) != 0L)
            return 48;
         if ((active0 & 0x3030ab0040010000L) != 0L || (active1 & 0x24405c050c2a19L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 4;
            }
            return 48;
         }
         if ((active1 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 33;
               jjmatchedPos = 4;
            }
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x2020290040010000L) != 0L || (active1 & 0x24405c01002808L) != 0L)
            return 48;
         if ((active0 & 0x1090820000000000L) != 0L || (active1 & 0x40c0211L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
            return 48;
         }
         return -1;
      case 6:
         if ((active0 & 0x1080000000000000L) != 0L || (active1 & 0x4040001L) != 0L)
            return 48;
         if ((active0 & 0x10820000000000L) != 0L || (active1 & 0x80210L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
            return 48;
         }
         return -1;
      case 7:
         if ((active0 & 0x10800000000000L) != 0L || (active1 & 0x210L) != 0L)
            return 48;
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 7;
            return 48;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 35:
         return jjStopAtPos(0, 26);
      case 40:
         return jjStartNfaWithStates_0(0, 17, 14);
      case 41:
         return jjStopAtPos(0, 18);
      case 43:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 59:
         return jjStopAtPos(0, 24);
      case 61:
         return jjStartNfaWithStates_0(0, 9, 267);
      case 63:
         return jjMoveStringLiteralDfa1_0(0xa000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100002030000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20005000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2c0800000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x240000000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000010L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2808080000000L, 0x8800000040000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x600000030000000L, 0x800010000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x5000004000000000L, 0x1000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20008000000L, 0x1000008008L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000010000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8010000000000L, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400804L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x830200000000000L, 0x24000000220000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2000000040000000L, 0x11000000102440L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8001400000000000L, 0x2000000000180L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000004000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc0000000000000L, 0x800000000000000L);
      case 123:
         return jjStopAtPos(0, 19);
      case 125:
         return jjStopAtPos(0, 20);
      case 126:
         return jjStopAtPos(0, 12);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 43:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 45:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 58:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 63:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x802000080010000L, active1, 0x104202110404804L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2030240000000000L, active1, 0x30014005020063L);
      case 102:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 48);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x800000000040180L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000000L, active1, 0x2028020000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x88030000000L, active1, 0x8000202000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x81000088000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x1001d40008000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c1000100000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80802000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000000L, active1, 0x40200400L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10200L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000000L, active1, 0x800000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x30008000000000L, active1, 0x802000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x80004L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x88000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x208400100000000L, active1, 0x10000202050200L);
      case 102:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000001L);
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c0000040000000L, active1, 0x900104000000100L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001000000000L, active1, 0x4000L);
      case 109:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x2000001000000L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 48);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000804000000000L, active1, 0x24000000100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000080000000000L, active1, 0x8000080000000L);
      case 112:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x408008408L);
      case 114:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 159);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000880L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xb0000000L, active1, 0x1000400010L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 69, 48);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 70, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x2220000000000L, active1, 0x402800000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800100000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000L);
      case 119:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 48);
         break;
      case 120:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 48);
         break;
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000100000000L, active1, 0x20000002000801L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000010000L, active1, 0L);
      case 99:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 48);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x40000L);
      case 100:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000000L, active1, 0x4000000000000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 48);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 48);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 48);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x2400030000000000L, active1, 0x81e04000400L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L);
      case 104:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 101, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000080000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 107:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000000000L);
      case 109:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 48);
         break;
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 48);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 48);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000010000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000088L);
      case 112:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 48);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800200L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 48);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x800008000000000L, active1, 0x8000100000000L);
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 48);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0800040000000L, active1, 0x408000002010L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0xc000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000010040000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 48);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 48);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 48);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 48);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x80000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 48);
         break;
      case 104:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 48);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x2000L);
      case 107:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1020000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000800L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4400000000000L);
      case 112:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 48);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 48);
         break;
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 48);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 89, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x220000000000L, active1, 0x1004000218L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 48);
         break;
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 48);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 48);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 48);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 48);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 119:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 48);
         break;
      case 120:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 99:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 48);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 48);
         break;
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 48);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 48);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x200L);
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x1080000000000000L, active1, 0x1L);
      case 109:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 48);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 48);
         break;
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 48);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 48);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 48);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 48);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 48);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 100:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 48);
         break;
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 48);
         break;
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 48);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 48);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 48);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 266;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 154:
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 266:
                  if (curChar == 62)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 250:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(24);
                  }
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x400500000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 38)
                     jjCheckNAddTwoStates(120, 6);
                  else if (curChar == 61)
                     jjCheckNAddTwoStates(2, 78);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 33)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 78);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(2, 76);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(2, 74);
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 37)
                     jjCheckNAdd(6);
                  else if (curChar == 47)
                     jjCheckNAdd(6);
                  else if (curChar == 42)
                     jjCheckNAdd(6);
                  else if (curChar == 43)
                     jjCheckNAdd(6);
                  else if (curChar == 61)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 14:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 41)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 248:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 267:
                  if (curChar == 62)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 268:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 1:
                  if ((0x5000000000000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 33 && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if (curChar == 61 && kind > 9)
                     kind = 9;
                  break;
               case 6:
                  if (curChar == 61 && kind > 9)
                     kind = 9;
                  break;
               case 7:
                  if (curChar == 43)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAdd(6);
                  break;
               case 9:
                  if (curChar == 47)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if (curChar == 37)
                     jjCheckNAdd(6);
                  break;
               case 12:
                  if ((0x400500000000000L & l) != 0L)
                     kind = 23;
                  break;
               case 13:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 41 && kind > 25)
                     kind = 25;
                  break;
               case 16:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(24);
                  break;
               case 52:
                  if (curChar == 49 && kind > 118)
                     kind = 118;
                  break;
               case 55:
                  if (curChar == 50 && kind > 118)
                     kind = 118;
                  break;
               case 58:
                  if (curChar == 48 && kind > 118)
                     kind = 118;
                  break;
               case 59:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 73:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(2, 74);
                  break;
               case 74:
                  if (curChar == 62)
                     jjCheckNAdd(6);
                  break;
               case 75:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(2, 76);
                  break;
               case 76:
                  if (curChar == 60)
                     jjCheckNAdd(6);
                  break;
               case 77:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(2, 78);
                  break;
               case 78:
                  if (curChar == 62 && kind > 14)
                     kind = 14;
                  break;
               case 119:
                  if (curChar == 38)
                     jjCheckNAddTwoStates(120, 6);
                  break;
               case 120:
                  if (curChar == 38 && kind > 8)
                     kind = 8;
                  break;
               case 132:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 78);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 154:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 159;
                  if (curChar == 114)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 234:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 239;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 134:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 151;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 146;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 135;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 138;
                  else if (curChar == 111)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 125;
                  else if (curChar == 114)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 250:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 264;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 256;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 252;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 262;
                  if (curChar == 111)
                     jjCheckNAdd(25);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 56;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 191:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 195;
                  if (curChar == 97)
                     jjCheckNAdd(92);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 252:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 269:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 109)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  break;
               case 203:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 105)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 229;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 227;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 214;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 208;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 180:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 187:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 120)
                     jjCheckNAdd(96);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  else if (curChar == 124)
                     jjCheckNAddTwoStates(122, 6);
                  else if (curChar == 94)
                     jjCheckNAdd(6);
                  if (curChar == 99)
                     jjAddStates(0, 5);
                  else if (curChar == 115)
                     jjAddStates(6, 11);
                  else if (curChar == 112)
                     jjAddStates(12, 18);
                  else if (curChar == 116)
                     jjAddStates(19, 22);
                  else if (curChar == 101)
                     jjAddStates(23, 24);
                  else if (curChar == 102)
                     jjAddStates(25, 34);
                  else if (curChar == 100)
                     jjAddStates(35, 40);
                  else if (curChar == 110)
                     jjAddStates(41, 42);
                  else if (curChar == 111)
                     jjAddStates(43, 44);
                  else if (curChar == 97)
                     jjCheckNAddStates(45, 52);
                  else if (curChar == 105)
                     jjCheckNAddStates(53, 58);
                  else if (curChar == 98)
                     jjAddStates(59, 60);
                  else if (curChar == 108)
                     jjAddStates(61, 65);
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 94)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 101)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  break;
               case 129:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(130);
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 248:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(162);
                  break;
               case 235:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 245;
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 242;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 240;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 236;
                  if (curChar == 105)
                     jjCheckNAdd(92);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 268:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 112)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  break;
               case 155:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 183;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 180;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 174;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  else if (curChar == 108)
                     jjCheckNAdd(162);
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 159:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 190:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 194;
                  if (curChar == 117)
                     jjCheckNAdd(164);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 117;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 114;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 111;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 101;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 107;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 105;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if (curChar == 115)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 98;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 110)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if (curChar == 115)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 138:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 150;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 249:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(48);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(109);
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 261;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 248;
                  if (curChar == 115)
                  {
                     if (kind > 118)
                        kind = 118;
                  }
                  break;
               case 11:
                  if (curChar == 94)
                     jjCheckNAdd(6);
                  break;
               case 23:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 115 && kind > 118)
                     kind = 118;
                  break;
               case 26:
                  if (curChar == 110)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 116 && kind > 118)
                     kind = 118;
                  break;
               case 33:
                  if (curChar == 111)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 102 && kind > 118)
                     kind = 118;
                  break;
               case 38:
                  if (curChar == 100)
                     jjCheckNAdd(37);
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
               case 82:
                  if (curChar == 101 && kind > 118)
                     kind = 118;
                  break;
               case 42:
                  if (curChar == 97 && kind > 118)
                     kind = 118;
                  break;
               case 43:
               case 62:
                  if (curChar == 109)
                     jjCheckNAdd(42);
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 108)
                     jjAddStates(61, 65);
                  break;
               case 50:
                  if (curChar == 103 && kind > 118)
                     kind = 118;
                  break;
               case 53:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 60:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 98)
                     jjAddStates(59, 60);
                  break;
               case 67:
                  if (curChar == 108 && kind > 35)
                     kind = 35;
                  break;
               case 68:
                  if (curChar == 111)
                     jjCheckNAdd(67);
                  break;
               case 70:
                  if (curChar == 101 && kind > 35)
                     kind = 35;
                  break;
               case 71:
               case 140:
                  if (curChar == 116)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 79:
                  if (curChar == 105)
                     jjCheckNAddStates(53, 58);
                  break;
               case 80:
                  if (curChar == 115 && kind > 7)
                     kind = 7;
                  break;
               case 83:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 110)
                     jjCheckNAdd(37);
                  break;
               case 90:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 110 && kind > 118)
                     kind = 118;
                  break;
               case 93:
               case 107:
                  if (curChar == 97)
                     jjCheckNAdd(92);
                  break;
               case 94:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 112 && kind > 118)
                     kind = 118;
                  break;
               case 97:
               case 179:
                  if (curChar == 120)
                     jjCheckNAdd(96);
                  break;
               case 98:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 97)
                     jjCheckNAddStates(45, 52);
                  break;
               case 101:
                  if (curChar == 100 && kind > 8)
                     kind = 8;
                  break;
               case 103:
                  if (curChar == 111)
                     jjCheckNAdd(25);
                  break;
               case 104:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 105)
                     jjCheckNAdd(92);
                  break;
               case 106:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 108:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 104 && kind > 118)
                     kind = 118;
                  break;
               case 110:
                  if (curChar == 115)
                     jjCheckNAdd(109);
                  break;
               case 111:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
               case 116:
               case 197:
               case 245:
                  if (curChar == 110)
                     jjCheckNAdd(109);
                  break;
               case 114:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 117:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 121:
                  if (curChar == 124)
                     jjCheckNAddTwoStates(122, 6);
                  break;
               case 122:
                  if (curChar == 124 && kind > 8)
                     kind = 8;
                  break;
               case 123:
                  if (curChar == 111)
                     jjAddStates(43, 44);
                  break;
               case 125:
                  if (curChar == 116 && kind > 44)
                     kind = 44;
                  break;
               case 126:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 110)
                     jjAddStates(41, 42);
                  break;
               case 128:
                  if (curChar == 116 && kind > 8)
                     kind = 8;
                  break;
               case 130:
                  if (curChar == 109 && kind > 35)
                     kind = 35;
                  break;
               case 131:
               case 186:
                  if (curChar == 117)
                     jjCheckNAdd(130);
                  break;
               case 133:
                  if (curChar == 100)
                     jjAddStates(35, 40);
                  break;
               case 135:
                  if (curChar == 98)
                     jjCheckNAdd(67);
                  break;
               case 136:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 105)
                     jjCheckNAdd(130);
                  break;
               case 139:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 141:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 109)
                     jjCheckNAdd(70);
                  break;
               case 143:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 101)
                     jjCheckNAdd(25);
                  break;
               case 149:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 102)
                     jjAddStates(25, 34);
                  break;
               case 156:
                  if (curChar == 104 && kind > 33)
                     kind = 33;
                  break;
               case 157:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 160:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if (curChar == 116 && kind > 35)
                     kind = 35;
                  break;
               case 163:
                  if (curChar == 108)
                     jjCheckNAdd(162);
                  break;
               case 164:
                  if (curChar == 101 && kind > 37)
                     kind = 37;
                  break;
               case 165:
                  if (curChar == 115)
                     jjCheckNAdd(164);
                  break;
               case 166:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 98)
                     jjCheckNAdd(25);
                  break;
               case 169:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 99)
                     jjCheckNAdd(32);
                  break;
               case 171:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 114 && kind > 118)
                     kind = 118;
                  break;
               case 173:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 100 && kind > 118)
                     kind = 118;
                  break;
               case 177:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 181:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 109 && kind > 118)
                     kind = 118;
                  break;
               case 183:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 101)
                     jjAddStates(23, 24);
                  break;
               case 188:
                  if (curChar == 120)
                     jjCheckNAdd(96);
                  break;
               case 189:
                  if (curChar == 116)
                     jjAddStates(19, 22);
                  break;
               case 192:
                  if (curChar == 97)
                     jjCheckNAdd(92);
                  break;
               case 193:
                  if (curChar == 99 && kind > 118)
                     kind = 118;
                  break;
               case 194:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 198:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 112)
                     jjAddStates(12, 18);
                  break;
               case 200:
                  if (curChar == 116 && kind > 56)
                     kind = 56;
                  break;
               case 201:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 204:
                  if (curChar == 110 && kind > 56)
                     kind = 56;
                  break;
               case 205:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 101 && kind > 76)
                     kind = 76;
                  break;
               case 211:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if (curChar == 100 && kind > 76)
                     kind = 76;
                  break;
               case 217:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 222:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if (curChar == 99 && kind > 76)
                     kind = 76;
                  break;
               case 225:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 227:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 228:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 119 && kind > 118)
                     kind = 118;
                  break;
               case 230:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 105 && kind > 118)
                     kind = 118;
                  break;
               case 232:
                  if (curChar == 115)
                     jjAddStates(6, 11);
                  break;
               case 233:
                  if (curChar == 103 && kind > 35)
                     kind = 35;
                  break;
               case 236:
                  if (curChar == 114)
                     jjCheckNAdd(162);
                  break;
               case 237:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 99)
                     jjCheckNAdd(162);
                  break;
               case 239:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 114)
                     jjCheckNAdd(32);
                  break;
               case 243:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if (curChar == 105)
                     jjCheckNAdd(92);
                  break;
               case 246:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if (curChar == 99)
                     jjAddStates(0, 5);
                  break;
               case 251:
                  if (curChar == 114 && kind > 35)
                     kind = 35;
                  break;
               case 253:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 111)
                     jjCheckNAdd(25);
                  break;
               case 255:
                  if (curChar == 108 && kind > 118)
                     kind = 118;
                  break;
               case 256:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if (curChar == 103)
                     jjCheckNAdd(92);
                  break;
               case 259:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 261:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if (curChar == 115)
                     jjCheckNAdd(109);
                  break;
               case 265:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 266 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   250, 253, 254, 257, 263, 265, 235, 237, 241, 243, 244, 246, 203, 209, 215, 223, 
   228, 230, 231, 191, 192, 196, 198, 187, 188, 155, 161, 163, 167, 169, 171, 175, 
   178, 181, 184, 134, 136, 139, 141, 147, 152, 129, 131, 124, 126, 80, 102, 104, 
   106, 108, 112, 115, 118, 80, 81, 88, 91, 95, 99, 69, 72, 51, 54, 57, 
   61, 65, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, "\53\53", "\55\55", 
"\176", "\77\72", null, "\77\77", "\154\141\155\142\144\141", "\50", "\51", "\173", 
"\175", "\133", "\135", null, "\73", null, "\43", "\151\146", "\145\154\163\145", 
"\145\154\163\151\146", "\163\167\151\164\143\150", "\143\141\163\145", "\142\162\145\141\153", null, 
null, null, "\156\165\154\154", null, "\146\165\156\143", "\143\154\141\163\163", 
"\157\142\152\145\143\164", "\151\156\164\145\162\146\141\143\145", "\144\145\154", 
"\147\154\157\142\141\154", null, "\162\145\164\165\162\156", "\164\150\145\156", 
"\143\157\156\164\151\156\165\145", "\164\162\171", "\143\141\164\143\150", "\154\151\153\145", 
"\157\160\145\156", "\162\145\141\144\146\151\154\145", "\162\145\141\144\154\156", 
"\167\162\151\164\145", "\167\162\151\164\145\154\156", null, "\145\170\145\143", 
"\145\170\143\145\160", "\162\141\151\163\145", "\146\151\156\141\154\154\171", 
"\163\145\154\145\143\164", "\146\162\157\155", "\164\171\160\145", "\144\145\146\141\165\154\164", 
"\156\145\167", "\160\141\143\153\147", "\151\155\160\157\162\164", 
"\141\142\163\164\162\141\143\164", "\147\145\164", "\163\145\164", "\164\150\162\157\167", "\164\150\151\163", 
"\157\166\145\162\162\151\144\145", "\163\165\160\145\162", "\160\141\162\141\155\163", null, 
"\163\164\141\164\151\143", "\166\141\154\165\145", "\151\156\160\165\164", "\145\166\145\156\164", 
"\162\145\146", "\143\150\145\143\153\145\144", "\165\156\143\150\145\143\153\145\144", 
"\163\171\156\143", "\162\165\156", "\160\141\163\163", "\123\164\141\162\164", 
"\122\145\155\157\166\145", "\103\154\145\141\162", "\122\145\166\145\162\163\145", "\103\157\160\171", 
"\115\141\170", "\115\151\156", "\123\165\155", "\123\164\157\160", "\120\141\165\163\145", 
"\123\154\145\145\160", "\141\160\160\145\156\144", "\145\170\164\145\156\144", 
"\151\156\163\145\162\164", "\115\141\164\150", "\110\145\151\147\150\164", "\127\151\144\164\150", 
"\114\145\146\164", "\122\151\147\150\164", "\124\157\160", "\111\156\144\145\170", 
"\166\157\151\144", "\124\141\147", "\102\157\164\164\157\155", "\143\157\165\156\164", 
"\163\157\162\164", "\164\151\155\145", "\162\141\156\144\157\155", "\143\154\157\163\145", 
"\163\145\145\153", "\162\145\156\141\155\145", null, null, "\115\141\151\156", "\75", "\54", 
"\167\150\151\154\145", "\146\157\162", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x1fffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[266];
static private final int[] jjstateSet = new int[532];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public compiTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public compiTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 266; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println("OPARITMETICO -> " +image);
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                      System.out.println("OPRELACIONAL -> " +image);
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                       System.out.println("OPLOGICO -> " +image);
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                              System.out.println("ASIGNACION -> " +image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                      System.out.println("INCREMENTO");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                        System.out.println("DECREMENTO");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                   System.out.println("COMPBITS");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                      System.out.println("OPTERNARIO");
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("APUNTADOR");
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                                System.out.println("OPFUSIONNULA");
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                             System.out.println("LAMBDA -> " +image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                 System.out.println("PARIZQ");
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                 System.out.println("PARDER");
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                   System.out.println("LLAVEIZQ");
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                    System.out.println("LLAVEDER");
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                  System.out.println("CORIZQ");
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                  System.out.println("CORDER");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("PUNTOS");
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                           System.out.println("FINLINEA");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.println("COMILLAS");
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                             System.out.println("COMENTARIO");
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                      System.out.println("IF");
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                         System.out.println("SINO");
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                            System.out.println("ELSIF");
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                             System.out.println("SWITCH");
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                          System.out.println("CASE");
         break;
      case 32 :
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                              System.out.println("FINCASE");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println("CICLO -> " +image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("NUMERO -> " +image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                                                  System.out.println("TIPODATO -> " +image);
         break;
      case 36 :
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                          System.out.println("NULO");
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println("VALOR_BOOLEANO");
         break;
      case 38 :
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                             System.out.println("FUNCION");
         break;
      case 39 :
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                            System.out.println("CLASE");
         break;
      case 40 :
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                                    System.out.println("VALOR_OBJETO");
         break;
      case 41 :
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                                        System.out.println("TIPO_INTERFAZ");
         break;
      case 42 :
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                                  System.out.println("TIPO_DELEGADO");
         break;
      case 43 :
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                              System.out.println("GLOBAL");
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("IO ");
         break;
      case 45 :
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                               System.out.println("RETORNO");
         break;
      case 46 :
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                          System.out.println("THEN");
         break;
      case 47 :
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                                   System.out.println("ITERACION -> " +image);
         break;
      case 48 :
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                           System.out.println("PRUEBA -> " +image);
         break;
      case 49 :
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                                System.out.println("ATRAPADOR -> " +image);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                                System.out.println("COMPARADOR -> " +image);
         break;
      case 51 :
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
                                   System.out.println("ABRIR_ARCHIVO -> " +image);
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                                      System.out.println("LEER_ARCHIVO");
         break;
      case 53 :
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                                  System.out.println("LEER_LINEA");
         break;
      case 54 :
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                               System.out.println("ESCRIBIR");
         break;
      case 55 :
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                                       System.out.println("ESCRIBIR_LINEA");
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                           System.out.println("IMPRIMIR -> " +image);
         break;
      case 58 :
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                                      System.out.println("ERROR_EXCEPCION -> " +image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                                    System.out.println("ERROR_BLOQUEO -> " +image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                                           System.out.println("ERROR_FINALIZACION -> " +image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                                System.out.println("SELECTOR -> " +image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                                  System.out.println("METODO_DESDE -> " +image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                                 System.out.println("METODO_TIPO -> " +image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                                        System.out.println("VALOR_DE_OBJETO -> " +image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                          System.out.println("NUEVO");
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                                 System.out.println("BIBLIOTECA -> " +image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                                           System.out.println("IMPORTAR_BIBLIOTECA -> " +image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                                     System.out.println("ABSTRACCION -> " +image);
         break;
      case 69 :
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                        System.out.println("GET");
         break;
      case 70 :
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                        System.out.println("SET");
         break;
      case 71 :
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                            System.out.println("THROW -> " +image);
         break;
      case 72 :
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                             System.out.println("PUNTERO -> " +image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                                     System.out.println("MOD_ABSTRAC -> " +image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                            System.out.println("SUPER -> " +image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                                  System.out.println("PARAMETROS -> " +image);
         break;
      case 76 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                             System.out.println("TIPO_METODO -> " +image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                                System.out.println("ESTATICO -> " +image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                            System.out.println("VALOR -> " +image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                            System.out.println("INPUT -> " +image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                             System.out.println("EVENTO -> " +image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                               System.out.println("REFERENCIA -> " +image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                                  System.out.println("COMPROBAR -> " +image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                                       System.out.println("DESCOMPROBAR -> " +image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                                 System.out.println("SINCRONIZAR -> " +image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                           System.out.println("CORRER -> " +image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                            System.out.println("IGNORAR -> " +image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                           System.out.println("START -> " +image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                              System.out.println("REMOVE -> " +image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                           System.out.println("CLEAR -> " +image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                                System.out.println("REVERSE -> " +image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                            System.out.println("COPIAR -> " +image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                           System.out.println("MAXIMO -> " +image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                           System.out.println("MINIMO -> " +image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                          System.out.println("SUMAR -> " +image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
                             System.out.println("DETENER -> " +image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                             System.out.println("PAUSAR -> " +image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                                System.out.println("SUSPENDER -> " +image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
                                System.out.println("ADJUNTAR -> " +image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                                System.out.println("EXTENDER -> " +image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
                                System.out.println("INSERTAR -> " +image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                             System.out.println("MODMATH -> " +image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                             System.out.println("HEIGHT -> " +image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                           System.out.println("WIDTH -> " +image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                         System.out.println("LEFT -> " +image);
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                           System.out.println("RIGHT -> " +image);
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                       System.out.println("TOP -> " +image);
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                            System.out.println("INDICE -> " +image);
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                           System.out.println("METODO -> " +image);
         break;
      case 109 :
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                       System.out.println("TAG -> " +image);
         break;
      case 110 :
        image.append(jjstrLiteralImages[110]);
        lengthOfMatch = jjstrLiteralImages[110].length();
                             System.out.println("BOTTOM -> " +image);
         break;
      case 111 :
        image.append(jjstrLiteralImages[111]);
        lengthOfMatch = jjstrLiteralImages[111].length();
                             System.out.println("CONTAR -> " +image);
         break;
      case 112 :
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                             System.out.println("ORDENAR -> " +image);
         break;
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                            System.out.println("TIEMPO -> " +image);
         break;
      case 114 :
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
                                 System.out.println("ALEATORIO");
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                            System.out.println("CLOSE -> " +image);
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                           System.out.println("BUSCAR -> " +image);
         break;
      case 117 :
        image.append(jjstrLiteralImages[117]);
        lengthOfMatch = jjstrLiteralImages[117].length();
                                System.out.println("RENOMBRAR -> " +image);
         break;
      case 118 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                 System.out.println("FUNCMAT -> " +image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
