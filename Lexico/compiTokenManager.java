/* Generated By:JavaCC: Do not edit this line. compiTokenManager.java */
import java.io.*;

/** Token Manager. */
public class compiTokenManager implements compiConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000000L) != 0L || (active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 126;
            return 33;
         }
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x880000008122010L) != 0L)
         {
            jjmatchedKind = 126;
            return 214;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 126;
            return 161;
         }
         if ((active0 & 0xc08008000000000L) != 0L || (active1 & 0x1200000011000004L) != 0L)
         {
            jjmatchedKind = 126;
            return 18;
         }
         if ((active0 & 0xa0200400000000L) != 0L || (active1 & 0x440000002000000L) != 0L)
         {
            jjmatchedKind = 126;
            return 229;
         }
         if ((active0 & 0x7000001000000000L) != 0L || (active1 & 0x3ff1ffc4200000L) != 0L)
         {
            jjmatchedKind = 126;
            return 36;
         }
         if ((active0 & 0x200L) != 0L)
            return 245;
         if ((active0 & 0x100000000020000L) != 0L)
         {
            jjmatchedKind = 126;
            return 39;
         }
         if ((active0 & 0x50000000000000L) != 0L || (active1 & 0x10000000000c040L) != 0L)
         {
            jjmatchedKind = 126;
            return 151;
         }
         if ((active0 & 0x800040000000L) != 0L || (active1 & 0x80000400400L) != 0L)
         {
            jjmatchedKind = 126;
            return 69;
         }
         if ((active0 & 0x180000000L) != 0L || (active1 & 0x40000800003L) != 0L)
         {
            jjmatchedKind = 125;
            return 147;
         }
         if ((active1 & 0x20000000800L) != 0L)
         {
            jjmatchedKind = 126;
            return 90;
         }
         if ((active0 & 0x106000000000L) != 0L || (active1 & 0x28L) != 0L)
         {
            jjmatchedKind = 126;
            return 123;
         }
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 126;
            return 117;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 6;
            return 246;
         }
         if ((active0 & 0x200400000000000L) != 0L || (active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 126;
            return 112;
         }
         if ((active1 & 0x20040200L) != 0L)
         {
            jjmatchedKind = 126;
            return 182;
         }
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 126;
            return 57;
         }
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 6;
            return 5;
         }
         return -1;
      case 1:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 231;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 36;
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 228;
         }
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 150;
         }
         if ((active1 & 0x200000000000004L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 17;
         }
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 140;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 247;
         }
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 213;
         }
         if ((active0 & 0x7f9a70ff80020000L) != 0L || (active1 & 0x1dbff3fffda7ff58L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 36;
         }
         if ((active1 & 0x40000000003L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 248;
         }
         if ((active0 & 0x1000000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 1;
            return 163;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x80000400000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
            return 36;
         }
         return -1;
      case 2:
         if ((active0 & 0x4100e000000000L) != 0L || (active1 & 0x12003811003100L) != 0L)
            return 36;
         if ((active0 & 0x7f9af41f80020000L) != 0L || (active1 & 0x1fedffc7eef7ceffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 126;
               jjmatchedPos = 2;
            }
            return 36;
         }
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 126;
               jjmatchedPos = 2;
            }
            return 227;
         }
         return -1;
      case 3:
         if ((active0 & 0x1310140480000000L) != 0L || (active1 & 0x988904428008061L) != 0L)
            return 36;
         if ((active0 & 0x6caae05b00020000L) != 0L || (active1 & 0x16656f83c6f74e9eL) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 3;
            return 36;
         }
         return -1;
      case 4:
         if ((active0 & 0x6080201900000000L) != 0L || (active1 & 0x445418140e24206L) != 0L)
            return 36;
         if ((active0 & 0xc2ac04200020000L) != 0L || (active1 & 0x12202e0286150c98L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 126;
               jjmatchedPos = 4;
            }
            return 36;
         }
         return -1;
      case 5:
         if ((active0 & 0x80a400200020000L) != 0L || (active1 & 0x12202e0080140410L) != 0L)
            return 36;
         if ((active0 & 0x4420804000000000L) != 0L || (active1 & 0x206010888L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
            return 36;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000004000000000L) != 0L || (active1 & 0x202000088L) != 0L)
            return 36;
         if ((active0 & 0x420800000000000L) != 0L || (active1 & 0x4010800L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 6;
            return 36;
         }
         return -1;
      case 7:
         if ((active0 & 0x420000000000000L) != 0L || (active1 & 0x10800L) != 0L)
            return 36;
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
            return 36;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 3;
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 35:
         return jjStopAtPos(0, 29);
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 43:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 44:
         return jjStopAtPos(0, 25);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 24);
      case 58:
         return jjStopAtPos(0, 27);
      case 59:
         return jjStopAtPos(0, 28);
      case 61:
         return jjStartNfaWithStates_0(0, 9, 245);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x14000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500000000L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x101800000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000280000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x16040000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x12000000000000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 91:
         return jjStopAtPos(0, 22);
      case 93:
         return jjStopAtPos(0, 23);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000800L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa0200400000000L, 0x440000002000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x40000800003L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x106000000000L, 0x28L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800040000000L, 0x80000400400L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000020000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200400000000000L, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20040200L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc08008000000000L, 0x1200000011000004L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x880000008122010L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x50000000000000L, 0x10000000000c040L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000200000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x6000001000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 20);
      case 125:
         return jjStopAtPos(0, 21);
      case 126:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 43:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 45:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 58:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 63:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000400020000L, active1, 0x210108820240204L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc09000000000000L, active1, 0x1800a00281003190L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 36);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10001000000000L, active1, 0x200c000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0x101401000000008L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200180000000L, active1, 0x400010100000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x4080004400000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20006000000000L, active1, 0xea000400000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x200008000000000L, active1, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x6040000800000000L, active1, 0x20L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4040100000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x140000000000L, active1, 0x2010020000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x810000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000003L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000040L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00200000000000L, active1, 0x40100000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000202L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4400000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000800000000L, active1, 0x800010102810001L);
      case 102:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000080L);
      case 103:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 116, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x7000001200000000L, active1, 0x8200000008004L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x200010L);
      case 109:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x100000080000000L);
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 92, 36);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x20100000000000L, active1, 0x1200000008000008L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x400004000000020L);
      case 112:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20400420440L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x80000000044000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x580000000L, active1, 0x80020000800L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 36);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 36);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0x88800000000000L, active1, 0x20140000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40008000000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 119:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 36);
         break;
      case 120:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 36);
         break;
      case 121:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x1000000100040088L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000020000L, active1, 0L);
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 36);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 36);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x2000000L);
      case 100:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000000L, active1, 0x200000000000000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 36);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 36);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 36);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 36);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0xc04000000000L, active1, 0x40f0200020012L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L);
      case 104:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000004000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 107:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 36);
         break;
      case 110:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 36);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 36);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000800000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80004400L);
      case 112:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 36);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40010000L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 36);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0x400008000000004L);
      case 116:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 36);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 119, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x6020000200000000L, active1, 0x20400000100800L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x600000L);
      case 121:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2004000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200000000L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 36);
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 36);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 36);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 36);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 122, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x4000000L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 73, 36);
         break;
      case 104:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 36);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x100000L);
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000040000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x220000000000000L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 36);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 36);
         break;
      case 114:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 36);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 36);
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000000L, active1, 0x80200010c00L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 36);
         break;
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 36);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 36);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 36);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 36);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 118, 36);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 119:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 36);
         break;
      case 120:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 99:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x4000000L);
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 36);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 36);
         break;
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 36);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 36);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x10000L);
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x88L);
      case 109:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 36);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 36);
         break;
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 36);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 36);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 36);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 36);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 36);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 36);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 100:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 36);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 101:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 36);
         break;
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 36);
         break;
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 36);
         break;
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 36);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 36);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 36);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 36);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 90, 36);
         break;
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 36);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 245;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 248:
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 182:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 246:
                  if (curChar == 62)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 245:
                  if (curChar == 62)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(12);
                  }
                  else if ((0xac2000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 38)
                     jjCheckNAddTwoStates(108, 5);
                  else if (curChar == 61)
                     jjCheckNAddTwoStates(2, 66);
                  else if (curChar == 33)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 45)
                     jjCheckNAddTwoStates(5, 66);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(2, 64);
                  else if (curChar == 62)
                     jjCheckNAddTwoStates(2, 62);
                  else if (curChar == 37)
                     jjCheckNAdd(5);
                  else if (curChar == 47)
                     jjCheckNAdd(5);
                  else if (curChar == 42)
                     jjCheckNAdd(5);
                  else if (curChar == 43)
                     jjCheckNAdd(5);
                  else if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 1:
                  if ((0x5000000000000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (curChar == 33)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 33 && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if (curChar == 61 && kind > 10)
                     kind = 10;
                  break;
               case 6:
                  if (curChar == 43)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if (curChar == 42)
                     jjCheckNAdd(5);
                  break;
               case 8:
                  if (curChar == 47)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if (curChar == 37)
                     jjCheckNAdd(5);
                  break;
               case 11:
                  if ((0x8400000000L & l) != 0L)
                     kind = 26;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(12);
                  break;
               case 40:
                  if (curChar == 49 && kind > 125)
                     kind = 125;
                  break;
               case 43:
                  if (curChar == 50 && kind > 125)
                     kind = 125;
                  break;
               case 46:
                  if (curChar == 48 && kind > 125)
                     kind = 125;
                  break;
               case 47:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 61:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(2, 62);
                  break;
               case 62:
                  if (curChar == 62)
                     jjCheckNAdd(5);
                  break;
               case 63:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(2, 64);
                  break;
               case 64:
                  if (curChar == 60)
                     jjCheckNAdd(5);
                  break;
               case 65:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(2, 66);
                  break;
               case 66:
                  if (curChar == 62 && kind > 15)
                     kind = 15;
                  break;
               case 107:
                  if (curChar == 38)
                     jjCheckNAddTwoStates(108, 5);
                  break;
               case 108:
                  if (curChar == 38 && kind > 8)
                     kind = 8;
                  break;
               case 120:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(5, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 248:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 112)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 182:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 105)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 208;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 206;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 201;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 193;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 187;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 48;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 213:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 218;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjCheckNAdd(118);
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 151:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 155;
                  if (curChar == 97)
                     jjCheckNAdd(80);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 140:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 86;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 82;
                  else if (curChar == 110)
                  {
                     if (kind > 50)
                        kind = 50;
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 78;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 75;
                  if (curChar == 115)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 229:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 243;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 235;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 231;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 241;
                  if (curChar == 111)
                     jjCheckNAdd(13);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  else if (curChar == 124)
                     jjCheckNAddTwoStates(110, 5);
                  else if (curChar == 94)
                     jjCheckNAdd(5);
                  if (curChar == 99)
                     jjAddStates(0, 5);
                  else if (curChar == 115)
                     jjAddStates(6, 11);
                  else if (curChar == 112)
                     jjAddStates(12, 18);
                  else if (curChar == 100)
                     jjAddStates(19, 23);
                  else if (curChar == 116)
                     jjAddStates(24, 27);
                  else if (curChar == 101)
                     jjAddStates(28, 29);
                  else if (curChar == 102)
                     jjAddStates(30, 37);
                  else if (curChar == 110)
                     jjAddStates(38, 39);
                  else if (curChar == 111)
                     jjAddStates(40, 41);
                  else if (curChar == 97)
                     jjCheckNAddStates(42, 49);
                  else if (curChar == 105)
                     jjCheckNAddStates(50, 55);
                  else if (curChar == 98)
                     jjAddStates(56, 57);
                  else if (curChar == 108)
                     jjAddStates(58, 62);
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 94)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 101)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 150:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 154;
                  if (curChar == 117)
                     jjCheckNAdd(124);
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 120)
                     jjCheckNAdd(84);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 161:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 176;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 171;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 165;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 228:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(97);
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 240;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 227;
                  if (curChar == 115)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 113;
                  else if (curChar == 114)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  break;
               case 123:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 143;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 137;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 134;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 130;
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 128;
                  else if (curChar == 108)
                     jjCheckNAdd(122);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 102;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if (curChar == 115)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 247:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 109)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  break;
               case 214:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 224;
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 221;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 219;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 215;
                  if (curChar == 105)
                     jjCheckNAdd(80);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 227:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 115)
                     jjCheckNAdd(122);
                  break;
               case 163:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 175;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 231:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAdd(36);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 10:
                  if (curChar == 94)
                     jjCheckNAdd(5);
                  break;
               case 13:
                  if (curChar == 115 && kind > 125)
                     kind = 125;
                  break;
               case 14:
                  if (curChar == 110)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 116 && kind > 125)
                     kind = 125;
                  break;
               case 21:
                  if (curChar == 111)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 102 && kind > 125)
                     kind = 125;
                  break;
               case 26:
                  if (curChar == 100)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
               case 70:
                  if (curChar == 101 && kind > 125)
                     kind = 125;
                  break;
               case 30:
                  if (curChar == 97 && kind > 125)
                     kind = 125;
                  break;
               case 31:
               case 50:
                  if (curChar == 109)
                     jjCheckNAdd(30);
                  break;
               case 32:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 108)
                     jjAddStates(58, 62);
                  break;
               case 38:
                  if (curChar == 103 && kind > 125)
                     kind = 125;
                  break;
               case 41:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 98)
                     jjAddStates(56, 57);
                  break;
               case 55:
                  if (curChar == 108 && kind > 41)
                     kind = 41;
                  break;
               case 56:
                  if (curChar == 111)
                     jjCheckNAdd(55);
                  break;
               case 58:
                  if (curChar == 101 && kind > 41)
                     kind = 41;
                  break;
               case 59:
               case 165:
                  if (curChar == 116)
                     jjCheckNAdd(58);
                  break;
               case 60:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 67:
                  if (curChar == 105)
                     jjCheckNAddStates(50, 55);
                  break;
               case 68:
                  if (curChar == 115 && kind > 7)
                     kind = 7;
                  break;
               case 71:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110)
                     jjCheckNAdd(25);
                  break;
               case 78:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 110 && kind > 125)
                     kind = 125;
                  break;
               case 81:
               case 95:
                  if (curChar == 97)
                     jjCheckNAdd(80);
                  break;
               case 82:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 112 && kind > 125)
                     kind = 125;
                  break;
               case 85:
               case 139:
                  if (curChar == 120)
                     jjCheckNAdd(84);
                  break;
               case 86:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 97)
                     jjCheckNAddStates(42, 49);
                  break;
               case 89:
                  if (curChar == 100 && kind > 8)
                     kind = 8;
                  break;
               case 91:
                  if (curChar == 111)
                     jjCheckNAdd(13);
                  break;
               case 92:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 105)
                     jjCheckNAdd(80);
                  break;
               case 94:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 96:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 104 && kind > 125)
                     kind = 125;
                  break;
               case 98:
                  if (curChar == 115)
                     jjCheckNAdd(97);
                  break;
               case 99:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
               case 104:
               case 157:
               case 224:
                  if (curChar == 110)
                     jjCheckNAdd(97);
                  break;
               case 102:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 105:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 109:
                  if (curChar == 124)
                     jjCheckNAddTwoStates(110, 5);
                  break;
               case 110:
                  if (curChar == 124 && kind > 8)
                     kind = 8;
                  break;
               case 111:
                  if (curChar == 111)
                     jjAddStates(40, 41);
                  break;
               case 113:
                  if (curChar == 116 && kind > 50)
                     kind = 50;
                  break;
               case 114:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 110)
                     jjAddStates(38, 39);
                  break;
               case 116:
                  if (curChar == 116 && kind > 8)
                     kind = 8;
                  break;
               case 118:
                  if (curChar == 109 && kind > 41)
                     kind = 41;
                  break;
               case 119:
               case 146:
                  if (curChar == 117)
                     jjCheckNAdd(118);
                  break;
               case 121:
                  if (curChar == 102)
                     jjAddStates(30, 37);
                  break;
               case 122:
                  if (curChar == 116 && kind > 41)
                     kind = 41;
                  break;
               case 124:
                  if (curChar == 101 && kind > 43)
                     kind = 43;
                  break;
               case 125:
                  if (curChar == 115)
                     jjCheckNAdd(124);
                  break;
               case 126:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 98)
                     jjCheckNAdd(13);
                  break;
               case 129:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 99)
                     jjCheckNAdd(20);
                  break;
               case 131:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 114 && kind > 125)
                     kind = 125;
                  break;
               case 133:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 100 && kind > 125)
                     kind = 125;
                  break;
               case 137:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 141:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 109 && kind > 125)
                     kind = 125;
                  break;
               case 143:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 101)
                     jjAddStates(28, 29);
                  break;
               case 148:
                  if (curChar == 120)
                     jjCheckNAdd(84);
                  break;
               case 149:
                  if (curChar == 116)
                     jjAddStates(24, 27);
                  break;
               case 152:
                  if (curChar == 97)
                     jjCheckNAdd(80);
                  break;
               case 153:
                  if (curChar == 99 && kind > 125)
                     kind = 125;
                  break;
               case 154:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 158:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 100)
                     jjAddStates(19, 23);
                  break;
               case 160:
                  if (curChar == 98)
                     jjCheckNAdd(55);
                  break;
               case 162:
                  if (curChar == 105)
                     jjCheckNAdd(118);
                  break;
               case 164:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 166:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 109)
                     jjCheckNAdd(58);
                  break;
               case 168:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 101)
                     jjCheckNAdd(13);
                  break;
               case 174:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 112)
                     jjAddStates(12, 18);
                  break;
               case 179:
                  if (curChar == 116 && kind > 63)
                     kind = 63;
                  break;
               case 180:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 183:
                  if (curChar == 110 && kind > 63)
                     kind = 63;
                  break;
               case 184:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 101 && kind > 83)
                     kind = 83;
                  break;
               case 190:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 100 && kind > 83)
                     kind = 83;
                  break;
               case 196:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if (curChar == 99 && kind > 83)
                     kind = 83;
                  break;
               case 204:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 119 && kind > 125)
                     kind = 125;
                  break;
               case 209:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 105 && kind > 125)
                     kind = 125;
                  break;
               case 211:
                  if (curChar == 115)
                     jjAddStates(6, 11);
                  break;
               case 212:
                  if (curChar == 103 && kind > 41)
                     kind = 41;
                  break;
               case 215:
                  if (curChar == 114)
                     jjCheckNAdd(122);
                  break;
               case 216:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if (curChar == 99)
                     jjCheckNAdd(122);
                  break;
               case 218:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 221:
                  if (curChar == 114)
                     jjCheckNAdd(20);
                  break;
               case 222:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 105)
                     jjCheckNAdd(80);
                  break;
               case 225:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 226:
                  if (curChar == 99)
                     jjAddStates(0, 5);
                  break;
               case 230:
                  if (curChar == 114 && kind > 41)
                     kind = 41;
                  break;
               case 232:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 111)
                     jjCheckNAdd(13);
                  break;
               case 234:
                  if (curChar == 108 && kind > 125)
                     kind = 125;
                  break;
               case 235:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 103)
                     jjCheckNAdd(80);
                  break;
               case 238:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 115)
                     jjCheckNAdd(97);
                  break;
               case 244:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 245 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   229, 232, 233, 236, 242, 244, 214, 216, 220, 222, 223, 225, 182, 188, 194, 202, 
   207, 209, 210, 161, 164, 166, 172, 177, 151, 152, 156, 158, 147, 148, 123, 127, 
   129, 131, 135, 138, 141, 144, 117, 119, 112, 114, 68, 90, 92, 94, 96, 100, 
   103, 106, 68, 69, 76, 79, 83, 87, 57, 60, 39, 42, 45, 49, 53, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\75", null, "\53\53", 
"\55\55", "\176", "\77\72", null, "\77\77", "\154\141\155\142\144\141", "\50", "\51", 
"\173", "\175", "\133", "\135", "\56", "\54", null, "\72", "\73", "\43", "\151\146", 
"\145\154\163\145", "\145\154\163\151\146", "\163\167\151\164\143\150", "\143\141\163\145", 
"\142\162\145\141\153", "\167\150\151\154\145", "\146\157\162", "\146\157\162\145\141\143\150", 
"\162\160\164", null, null, "\156\165\154\154", null, "\146\165\156\143", 
"\143\154\141\163\163", "\157\142\152\145\143\164", "\151\156\164\145\162\146\141\143\145", 
"\144\145\154", "\147\154\157\142\141\154", null, "\162\145\164\165\162\156", 
"\164\150\145\156", "\143\157\156\164\151\156\165\145", "\164\162\171", "\143\141\164\143\150", 
"\154\151\153\145", "\157\160\145\156", "\162\145\141\144\146\151\154\145", 
"\162\145\141\144\154\156", "\115\141\151\156", "\167\162\151\164\145", "\167\162\151\164\145\154\156", 
null, "\145\170\145\143", "\145\170\143\145\160", "\162\141\151\163\145", 
"\146\151\156\141\154\154\171", "\163\145\154\145\143\164", "\146\162\157\155", "\164\171\160\145", 
"\144\145\146\141\165\154\164", "\156\145\167", "\160\141\143\153\147", "\151\155\160\157\162\164", 
"\141\142\163\164\162\141\143\164", "\147\145\164", "\163\145\164", "\164\150\162\157\167", "\164\150\151\163", 
"\157\166\145\162\162\151\144\145", "\163\165\160\145\162", "\160\141\162\141\155\163", null, 
"\163\164\141\164\151\143", "\166\141\154\165\145", "\151\156\160\165\164", "\145\166\145\156\164", 
"\162\145\146", "\143\150\145\143\153\145\144", "\165\156\143\150\145\143\153\145\144", 
"\163\171\156\143", "\162\165\156", "\160\141\163\163", "\123\164\141\162\164", 
"\122\145\155\157\166\145", "\103\154\145\141\162", "\122\145\166\145\162\163\145", "\103\157\160\171", 
"\115\141\170", "\115\151\156", "\123\165\155", "\123\164\157\160", "\120\141\165\163\145", 
"\123\154\145\145\160", "\141\160\160\145\156\144", "\145\170\164\145\156\144", 
"\151\156\163\145\162\164", "\115\141\164\150", "\110\145\151\147\150\164", "\127\151\144\164\150", 
"\114\145\146\164", "\122\151\147\150\164", "\124\157\160", "\111\156\144\145\170", 
"\166\157\151\144", "\124\141\147", "\102\157\164\164\157\155", "\143\157\165\156\164", 
"\163\157\162\164", "\164\151\155\145", "\162\141\156\144\157\155", "\143\154\157\163\145", 
"\163\145\145\153", "\162\145\156\141\155\145", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7fffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[245];
static private final int[] jjstateSet = new int[490];
static protected char curChar;
/** Constructor. */
public compiTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public compiTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 245; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
