/* Generated By:JavaCC: Do not edit this line. compi.java */
import java.io.*;

public class compi implements compiConstants {
  public static void main( String[] args) throws ParseException, Exception
  {
  try{
    compi analizador = new compi(System.in);
    analizador.Inicio();
    System.out.println("\u005ct Termino el analisis");
    System.out.println("\u005ct Analisis exitoso");

  }
  catch(ParseException e){
    System.out.println("\u005ct Se encontraron errores en el analisis");
    System.out.println(e.getMessage());
    System.out.println("\u005ct Termino el analisis");
  }
  }

  static final public void Inicio() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORTAR_BIBLIOTECA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Llamarpaquete();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Clase();
    }
    label_3:
    while (true) {
      CuerpoMetodo();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METODO:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
    }
    jj_consume_token(0);
  }

  static final public void Llamarpaquete() throws ParseException {
    jj_consume_token(IMPORTAR_BIBLIOTECA);
    jj_consume_token(BIBLIOTECA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FINLINEA);
  }

  static final public void Clase() throws ParseException {
    jj_consume_token(CLASE);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFICADOR);
    Sentencias();
    jj_consume_token(FINCLASE);
    jj_consume_token(FINLINEA);
  }

  static final public void Bloque() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case METODO:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      CuerpoMetodo();
    }
    Sentencias();
  }

  static final public void Sentencias() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAMBDA:
      case INICIOCOMENTARIO:
      case IF:
      case SINO:
      case ELSIF:
      case SWITCH:
      case MIENTRAS:
      case FOR:
      case REPETIR:
      case CONSTANTE:
      case TIPODATO:
      case FUNCION:
      case GLOBAL:
      case ARREGLO:
      case PRUEBA:
      case ATRAPADOR:
      case HILO:
      case ABRIR_ARCHIVO:
      case LEER_ARCHIVO:
      case IMPRIMIR:
      case IMPORTAR_BIBLIOTECA:
      case INPUT:
      case MODMATH:
      case INSTANCIA:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPODATO:
        Declaracion();
        break;
      case GLOBAL:
        declaracionGlobal();
        break;
      case CONSTANTE:
        declaracionConstante();
        break;
      case IDENTIFICADOR:
        Operacion();
        break;
      case FUNCION:
        CuerpoFuncion();
        break;
      case IF:
        CuerpoIF();
        break;
      case IMPRIMIR:
        Imprimir();
        break;
      case REPETIR:
        CicloRepetir();
        break;
      case FOR:
        CuerpoFor();
        break;
      case SINO:
        CuerpoSino();
        break;
      case ELSIF:
        CuerpoELSIF();
        break;
      case MIENTRAS:
        CuerpoMientras();
        break;
      case LAMBDA:
        ExpresionLambda();
        break;
      case INICIOCOMENTARIO:
        Comentario();
        break;
      case HILO:
        Hilo();
        break;
      case SWITCH:
        CuerpoSwitch();
        break;
      case PRUEBA:
        Prueba();
        break;
      case ATRAPADOR:
        Atrapar();
        break;
      case INSTANCIA:
        Instancia();
        break;
      case ARREGLO:
        Arreglos();
        break;
      case MODMATH:
        FuncionMath();
        break;
      case ABRIR_ARCHIVO:
        AbrirArchivos();
        break;
      case IMPORTAR_BIBLIOTECA:
        Llamarpaquete();
        break;
      case LEER_ARCHIVO:
        LeerArchivos();
        break;
      case INPUT:
        EntradaDatos();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void CuerpoMetodo() throws ParseException {
    jj_consume_token(METODO);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFICADOR);
    Sentencias();
    jj_consume_token(FINMETODO);
    jj_consume_token(FINLINEA);
  }

  static final public void Declaracion() throws ParseException {
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
    case NUMERO:
    case IDENTIFICADOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMILLAS:
        AsignarCadena();
        break;
      case NUMERO:
      case IDENTIFICADOR:
        AsignarOp();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(FINLINEA);
  }

  static final public void AsignarCadena() throws ParseException {
    jj_consume_token(COMILLAS);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(COMILLAS);
  }

  static final public void AsignarOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Operacion() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      break;
    case OPASIGNACION:
      jj_consume_token(OPASIGNACION);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
      AsignarCadena();
      break;
    case NUMERO:
    case IDENTIFICADOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPARITMETICO:
        jj_consume_token(OPARITMETICO);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FINLINEA);
  }

  static final public void declaracionGlobal() throws ParseException {
    jj_consume_token(GLOBAL);
    Declaracion();
  }

  static final public void declaracionConstante() throws ParseException {
    jj_consume_token(CONSTANTE);
    Declaracion();
  }

  static final public void CuerpoFuncion() throws ParseException {
    jj_consume_token(FUNCION);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFICADOR);
    ParamFuncion();
    Sentencias();
    jj_consume_token(RETORNO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FINLINEA);
  }

  static final public void ParamFuncion() throws ParseException {
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFICADOR);
    MasParametros();
    jj_consume_token(PARDER);
  }

  static final public void MasParametros() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFICADOR);
    }
  }

  static final public void CuerpoIF() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(PUNTERO);
    Argumento();
    Sentencias();
    jj_consume_token(FINSI);
    jj_consume_token(FINLINEA);
  }

  static final public void Argumento() throws ParseException {
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPRELACIONAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(THEN);
  }

  static final public void CuerpoSino() throws ParseException {
    jj_consume_token(SINO);
    jj_consume_token(THEN);
    Sentencias();
    jj_consume_token(FINSI);
    jj_consume_token(FINLINEA);
  }

  static final public void CuerpoELSIF() throws ParseException {
    jj_consume_token(ELSIF);
    jj_consume_token(PUNTERO);
    Argumento();
    Sentencias();
    jj_consume_token(FINSI);
    jj_consume_token(FINLINEA);
  }

  static final public void CuerpoMientras() throws ParseException {
    jj_consume_token(MIENTRAS);
    jj_consume_token(PUNTERO);
    Argumento();
    Sentencias();
    jj_consume_token(FINMETODO);
  }

  static final public void CuerpoFor() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(PUNTERO);
    ArgumentoFor();
    jj_consume_token(DOSPUNTOS);
    Sentencias();
    jj_consume_token(FINFOR);
    jj_consume_token(FINLINEA);
  }

  static final public void ArgumentoFor() throws ParseException {
    jj_consume_token(PARIZQ);
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(OPRELACIONAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COMA);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCREMENTO:
      jj_consume_token(INCREMENTO);
      break;
    case DECREMENTO:
      jj_consume_token(DECREMENTO);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARDER);
  }

  static final public void ExpresionLambda() throws ParseException {
    jj_consume_token(LAMBDA);
    jj_consume_token(IDENTIFICADOR);
    ArgumentoLambda();
    expresion();
    jj_consume_token(FINLINEA);
  }

  static final public void ArgumentoLambda() throws ParseException {
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFICADOR);
    MasID();
    jj_consume_token(PARDER);
    jj_consume_token(APUNTADOR);
  }

  static final public void MasID() throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFICADOR);
    }
  }

  static final public void expresion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OPARITMETICO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CicloRepetir() throws ParseException {
    jj_consume_token(REPETIR);
    jj_consume_token(PUNTERO);
    jj_consume_token(DOSPUNTOS);
    Sentencias();
    jj_consume_token(HASTA);
    Operacion();
  }

  static final public void Imprimir() throws ParseException {
    jj_consume_token(IMPRIMIR);
    jj_consume_token(PARIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    case COMILLAS:
      AsignarCadena();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARDER);
    jj_consume_token(FINLINEA);
  }

  static final public void Comentario() throws ParseException {
    jj_consume_token(INICIOCOMENTARIO);
    label_9:
    while (true) {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(FINCOMENTARIO);
  }

  static final public void Hilo() throws ParseException {
    jj_consume_token(HILO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(INSTRUCHILO);
    jj_consume_token(FINLINEA);
  }

  static final public void CuerpoSwitch() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(PUNTERO);
    jj_consume_token(APUNTADOR);
    jj_consume_token(IDENTIFICADOR);
    BloqueSwitch();
  }

  static final public void BloqueSwitch() throws ParseException {
    jj_consume_token(EN);
    jj_consume_token(CASE);
    jj_consume_token(NUMERO);
    jj_consume_token(THEN);
    Sentencias();
    MasCasos();
    jj_consume_token(FINCASE);
    jj_consume_token(FINLINEA);
  }

  static final public void MasCasos() throws ParseException {
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EN:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_10;
      }
      jj_consume_token(EN);
      jj_consume_token(CASE);
      jj_consume_token(NUMERO);
      jj_consume_token(THEN);
      Sentencias();
    }
  }

  static final public void ValorDefault() throws ParseException {
    jj_consume_token(VALOR_DEFAULT);
    Sentencias();
  }

  static final public void Prueba() throws ParseException {
    jj_consume_token(PRUEBA);
    jj_consume_token(NEXT);
    Sentencias();
    jj_consume_token(FINMETODO);
    jj_consume_token(PRUEBA);
    jj_consume_token(FINLINEA);
  }

  static final public void Atrapar() throws ParseException {
    jj_consume_token(ATRAPADOR);
    jj_consume_token(DOSPUNTOS);
    Sentencias();
    jj_consume_token(FINMETODO);
    jj_consume_token(ATRAPADOR);
    jj_consume_token(FINLINEA);
  }

  static final public void Instancia() throws ParseException {
    jj_consume_token(INSTANCIA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMO);
    jj_consume_token(NUEVO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(CORIZQ);
    jj_consume_token(CORDER);
  }

  static final public void Arreglos() throws ParseException {
    jj_consume_token(ARREGLO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMO);
    BloqueArreglos();
  }

  static final public void BloqueArreglos() throws ParseException {
    jj_consume_token(CORIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMILLAS:
      AsignarCadena();
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    MasCadenasNumeros();
    jj_consume_token(CORDER);
  }

  static final public void MasCadenasNumeros() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMILLAS:
        AsignarCadena();
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void FuncionMath() throws ParseException {
    jj_consume_token(MODMATH);
    jj_consume_token(PUNTO);
    jj_consume_token(FUNCMAT);
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMA);
    jj_consume_token(NUMERO);
    jj_consume_token(PARDER);
  }

  static final public void AbrirArchivos() throws ParseException {
    jj_consume_token(ABRIR_ARCHIVO);
    jj_consume_token(PUNTO);
    jj_consume_token(ARCHIVO);
    jj_consume_token(PARIZQ);
    CadenaArchivo();
    jj_consume_token(PARDER);
  }

  static final public void CadenaArchivo() throws ParseException {
    jj_consume_token(COMILLAS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PUNTO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMILLAS);
  }

  static final public void LeerArchivos() throws ParseException {
    jj_consume_token(LEER_ARCHIVO);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
    jj_consume_token(FINLINEA);
  }

  static final public void EntradaDatos() throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEER_LINEA:
      jj_consume_token(LEER_LINEA);
      break;
    case ESCRIBIR:
      SalidaDatos();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(FINLINEA);
  }

  static final public void SalidaDatos() throws ParseException {
    jj_consume_token(ESCRIBIR);
    jj_consume_token(PARIZQ);
    AsignarCadena();
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARDER);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0xa0020000,0xa0020000,0x4000000,0x4000000,0x0,0x0,0x0,0x600,0x0,0x0,0x40,0x4000000,0x2000000,0x0,0x0,0x1800,0x2000000,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x2000000,0x4000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10000,0x0,0x0,0xb4409967,0xb4409967,0x400,0x400,0x400,0x400,0x400,0x0,0x400,0x400,0x0,0x400,0x0,0x400,0x400,0x0,0x0,0x400,0x400,0x0,0x0,0x800000,0x400,0x0,0x400,0x0,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10000,0x0,0x0,0x0,0x10010026,0x10010026,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x4000000,0x4000000,0x20080000,0x20080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x0,0x40,0x40,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x40,0x40,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x40,};
   }

  /** Constructor with InputStream. */
  public compi(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compi(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compi(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compi(compiTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[135];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 135; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
