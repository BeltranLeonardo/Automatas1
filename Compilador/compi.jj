PARSER_BEGIN(compi)
import java.io.*;

public class compi
{
  public static void main( String[] args) throws ParseException, Exception
  {
  try{
    compi analizador = new compi(System.in);
    analizador.Inicio();
    System.out.println("\t Termino el analisis");
    System.out.println("\t Analisis exitoso");

  }
  catch(ParseException e){
    System.out.println("\t Se encontraron errores en el analisis");
    System.out.println(e.getMessage());
    System.out.println("\t Termino el analisis");
  }
  }
}
PARSER_END(compi)

/*  LEXICO */

SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" | "\t" }

TOKEN : {
  <OPARITMETICO:"+" | "-" | "*" | "/" | "%" | "^">
}

TOKEN : {
  <OPRELACIONAL: ">" | "<" | ">=" | "<=" | "==" | "!=" | "is">}

TOKEN : {
  <OPLOGICO: "&&" | "||" | "!" | "and" | "or" | "not">
}

TOKEN : {
  <ASIGNACION: "=" >
}

TOKEN : {
  <OPASIGNACION: "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<=" | ">>=">
}

TOKEN : {
  <INCREMENTO: "++" >
  | <DECREMENTO: "--" >
}

TOKEN : {
  <COMPBITS: "~" >
}
TOKEN : {
  <OPTERNARIO: "?:" >
  }
TOKEN : { <APUNTADOR: "->" | "=>"> }
TOKEN : { <OPFUSIONNULA: "??"> }
TOKEN : { <LAMBDA: "lambda"> }
TOKEN : {
  <PARIZQ: "(" >
  |<PARDER: ")">
  |<LLAVEIZQ: "{">
  |<LLAVEDER: "}">
  |<CORIZQ: "[">
  |<CORDER: "]">
}
TOKEN : { <PUNTO: "." > }
TOKEN : { <COMA: ",">}
TOKEN : { <COMILLAS: "\"" | "\'">}
TOKEN : { <DOSPUNTOS: ":"> }
TOKEN : { <FINLINEA: ";"> }
TOKEN : { <INICIOCOMENTARIO: "#<"> }
TOKEN : { <FINCOMENTARIO: ">#"> }
TOKEN : { <IF: "if"> }
TOKEN : { <SINO: "else">}
TOKEN : { <ELSIF: "elsif"> }
TOKEN : { <SWITCH: "switch">}
TOKEN : { <CASE: "case"> }
TOKEN : { <FINCASE: "endcase"> }
TOKEN : { <MIENTRAS: "while" > }
TOKEN : { <FOR: "for" > }
TOKEN : { <FOREACH: "foreach" > }
TOKEN : { <REPETIR: "rept" > }
TOKEN : { <HASTA: "until"> }
TOKEN : { <NUMERO: (["0"-"9"])+> }
TOKEN : { <CONSTANTE: "cons"> }
TOKEN : {
  <TIPODATO : "strg" | "let" | "flt"  | "dobl" | "bool" | "byte" | "shrt" | "char" | "decim" | "enum" | "struct" | "date" | "datetime" >
  }
TOKEN : { <NULO: "null"> }
TOKEN : { <VALOR_BOOLEANO: "true" | "false"> }
TOKEN : { <FUNCION: "func"> }
TOKEN : { <CLASE: "class"> }
TOKEN : { <VALOR_OBJETO: "object"> }
TOKEN : { <TIPO_INTERFAZ: "interface"> }
TOKEN: { <NEXT: "next"> }
TOKEN : { <TIPO_DELEGADO: "del"> }
TOKEN : { <COMO: "as"> }
TOKEN : { <GLOBAL: "global"> }
TOKEN : { <EN: "in"> }
TOKEN : { <RETORNO: "return"> }
TOKEN : { <THEN: "then"> }
TOKEN : { <ARREGLO: "array"> }
TOKEN : { <ITERACION: "continue"> }
TOKEN : { <PRUEBA: "try"> }
TOKEN : { <ATRAPADOR: "oops"> }
TOKEN : { <COMPARADOR: "like"> }
TOKEN: { <HILO: "strand"> }
TOKEN: { <ARCHIVO: "File"> }
TOKEN : { <ABRIR_ARCHIVO: "open"> }
TOKEN : { <LEER_ARCHIVO: "readfile"> }
TOKEN : { <LEER_LINEA: "read" | "readln"> }
TOKEN : { <ESCRIBIR: "write" | "writeln"> }
TOKEN : { <IMPRIMIR: "display"> }
TOKEN : { <EJECUCION: "exec"> }
TOKEN : { <ERROR_EXCEPCION: "excep"> }
TOKEN : { <ERROR_BLOQUEO: "raise"> }
TOKEN : { <ERROR_FINALIZACION: "finally"> }
TOKEN : { <SELECTOR: "select"> }
TOKEN : { <METODO_DESDE: "from"> }
TOKEN : { <METODO_TIPO: "type"> }
TOKEN : { <VALOR_DEFAULT: "default"> }
TOKEN : { <NUEVO: "new"> }
TOKEN : { <BIBLIOTECA: "packg"> }
TOKEN : { <IMPORTAR_BIBLIOTECA: "import"> }
TOKEN : { <ABSTRACCION: "abstract"> }
TOKEN : { <GET: "get"> }
TOKEN : { <SET: "set"> }
TOKEN : { <THROW: "throw"> }
TOKEN : { <PUNTERO: "this"> }
TOKEN : { <MOD_ABSTRAC: "override"> }
TOKEN : { <SUPER: "super"> }
TOKEN : { <PARAMETROS: "params"> }
TOKEN : { <TIPO_METODO: "private" | "protected" | "public"> }
TOKEN : { <ESTATICO: "static">}
TOKEN : { <VALOR: "value"> }
TOKEN : { <INPUT: "input"> }
TOKEN : { <FINFOR: "endfor"> }
TOKEN : { <EVENTO: "event"> }
TOKEN : { <REFERENCIA: "ref"> }
TOKEN : { <COMPROBAR: "checked"> }
TOKEN : { <DESCOMPROBAR: "unchecked"> }
TOKEN : { <SINCRONIZAR: "sync"> }
TOKEN : { <CORRER: "run"> }
TOKEN : {<IGNORAR: "pass"> }
TOKEN : {
  <INSTRUCHILO: "Start" | "Stop" | "Pause" | "Sleep">
}
TOKEN : { <REMOVE: "Remove"> }
TOKEN : { <CLEAR: "Clear"> }
TOKEN : { <REVERSE: "Reverse"> }
TOKEN : { <COPIAR: "Copy"> }
TOKEN : { <MAXIMO: "Max"> }
TOKEN : { <MINIMO: "Min"> }
TOKEN : { <SUMAR: "Sum"> }
TOKEN : { <FINCLASE: "classend"> }
TOKEN : { <FINSI: "endif"> }
TOKEN : { <FINMETODO: "last"> }
TOKEN : { <ADJUNTAR: "append"> }
TOKEN : { <EXTENDER: "extend"> }
TOKEN : { <INSERTAR: "insert"> }
TOKEN : { <MODMATH: "Math"> }
TOKEN : { <HEIGHT: "Height">}
TOKEN : { <WIDTH: "Width">}
TOKEN : { <LEFT: "Left">}
TOKEN : { <RIGHT: "Right">}
TOKEN : { <TOP: "Top">}
TOKEN : { <INDICE: "Index">}
TOKEN : { <METODO: "void">}
TOKEN : { <TAG: "Tag">}
TOKEN : { <BOTTOM: "Bottom">}
TOKEN : { <INSTANCIA: "instance"> }
TOKEN : { <CONTAR: "count"> }
TOKEN : { <ORDENAR: "sort"> }
TOKEN : { <TIEMPO: "time"> }
TOKEN : { <ALEATORIO: "random"> }
TOKEN : { <CLOSE: "close"> }
TOKEN : { <BUSCAR: "seek">}
TOKEN : { <RENOMBRAR: "rename">}
TOKEN: {
  <FUNCMAT: "pow" | "sqrt" | "cos" | "sin" | "tan" | "degrees" | "radians" |
    "hypot" | "ceil" | "copysign" | "fabs" | "fact" | "floor" | "fmod" | "frexp" | "fsum" | "isfinite" |
    "isinf" | "isnan" | "idexp" | "modf"| "trunc" | "exp" | "log" | "log1" | "log2" | "log10" | "sinh" |
    "tanh" | "cosh" | "acos" | "asin" | "atan" | "acosh" | "asinh" | "atanh" | "pi" | "e" | "gamma" | "lgamma">
}
TOKEN : { <IDENTIFICADOR: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*> }

/*  GRAMATICA  */

public void Inicio():
{}
{
  (Llamarpaquete())* (Clase())* (CuerpoMetodo())+
  <EOF>
}

void Llamarpaquete() :
{}
{
  <IMPORTAR_BIBLIOTECA> <BIBLIOTECA> <IDENTIFICADOR> <FINLINEA>
}

void Clase():
{}
{
  <CLASE> <DOSPUNTOS> <IDENTIFICADOR> Sentencias() <FINCLASE> <FINLINEA>
}

void Bloque():
{}
{
  (CuerpoMetodo())*  Sentencias()
}

void Sentencias():
{}
{
  (Declaracion() | declaracionGlobal() | declaracionConstante() | Operacion() | CuerpoFuncion() |
  CuerpoIF() | Imprimir() | CicloRepetir() | CuerpoFor() | CuerpoSino() | CuerpoELSIF() |
  CuerpoMientras() | ExpresionLambda() | Comentario() | Hilo() | CuerpoSwitch() | Prueba() | Atrapar() |
  Instancia() | Arreglos() | FuncionMath() | AbrirArchivos() | Llamarpaquete() | LeerArchivos() | EntradaDatos())*
}

void CuerpoMetodo():
{}
{
  <METODO> <DOSPUNTOS> <IDENTIFICADOR> Sentencias() <FINMETODO> <FINLINEA>
}


void Declaracion():
{}
{
  <TIPODATO> <IDENTIFICADOR> <COMO> (AsignarCadena() | AsignarOp())? <FINLINEA>
}

void AsignarCadena():
{}
{
  (<COMILLAS>) (<IDENTIFICADOR> | <NUMERO>)+ (<COMILLAS>)
}

void AsignarOp():
{}
{
  (<IDENTIFICADOR> | <NUMERO>)
}

void Operacion():
{}
{
  <IDENTIFICADOR> (<ASIGNACION>|<OPASIGNACION>) (AsignarCadena() | (<IDENTIFICADOR> | <NUMERO>) (<OPARITMETICO> (<IDENTIFICADOR> | <NUMERO>))?) <FINLINEA>
}


void declaracionGlobal():
{}
{
  <GLOBAL> Declaracion()
}

void declaracionConstante():
{}
{
  <CONSTANTE> Declaracion()
}

void CuerpoFuncion():
{}
{
  <FUNCION> <DOSPUNTOS> <IDENTIFICADOR> ParamFuncion() Sentencias() <RETORNO> <IDENTIFICADOR> <FINLINEA>
}

void ParamFuncion():
{}
{
  <PARIZQ> <IDENTIFICADOR> MasParametros() <PARDER>
}

void MasParametros():
{}
{
  (<COMA> <IDENTIFICADOR>)*
}

void CuerpoIF():
{}
{
  <IF> <PUNTERO> Argumento() Sentencias() <FINSI> <FINLINEA>
}

void Argumento():
{}
{
  <DOSPUNTOS> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <THEN>
}

void CuerpoSino():
{}
{
  <SINO> <THEN> Sentencias() <FINSI> <FINLINEA>
}

void CuerpoELSIF():
{}
{
  <ELSIF> <PUNTERO> Argumento() Sentencias() <FINSI> <FINLINEA>
}

void CuerpoMientras():
{}
{
  <MIENTRAS> <PUNTERO> Argumento() Sentencias() <FINMETODO>
}

void CuerpoFor():
{}
{
  <FOR> <PUNTERO> ArgumentoFor() <DOSPUNTOS> Sentencias() <FINFOR> <FINLINEA>
}

void ArgumentoFor():
{}
{
  <PARIZQ> <TIPODATO> <IDENTIFICADOR> <COMA> <IDENTIFICADOR> <OPRELACIONAL> (<IDENTIFICADOR> | <NUMERO>) <COMA> <IDENTIFICADOR> (<INCREMENTO> | <DECREMENTO>) <PARDER>
}

void ExpresionLambda():
{}
{
  <LAMBDA> <IDENTIFICADOR> ArgumentoLambda() expresion() <FINLINEA>
}

void ArgumentoLambda():
{}
{
  <PARIZQ> <IDENTIFICADOR> MasID() <PARDER><APUNTADOR>
}

void MasID():
{}
{
  (<COMA> <IDENTIFICADOR>)*
}

void expresion():
{}
{
  (<IDENTIFICADOR> | <NUMERO>) <OPARITMETICO> (<IDENTIFICADOR> | <NUMERO>)
}

void CicloRepetir():
{}
{
  <REPETIR> <PUNTERO> <DOSPUNTOS> Sentencias() <HASTA> Operacion()
}

void Imprimir():
{}
{
  <IMPRIMIR> <PARIZQ> (<IDENTIFICADOR> | AsignarCadena()) <PARDER> <FINLINEA>
}

void Comentario():
{}
{
  <INICIOCOMENTARIO> (<IDENTIFICADOR>)+ <FINCOMENTARIO>
}

void Hilo():
{}
{
  <HILO> <IDENTIFICADOR> <INSTRUCHILO> <FINLINEA>
}

void CuerpoSwitch():
{}
{
  <SWITCH> <PUNTERO> <APUNTADOR> <IDENTIFICADOR> BloqueSwitch()
}

void BloqueSwitch():
{}
{
  <EN> <CASE> <NUMERO> <THEN> Sentencias() MasCasos() <FINCASE> <FINLINEA>
}

void MasCasos():
{}
{
  (<EN> <CASE> <NUMERO> <THEN> Sentencias())*
}

void ValorDefault():
{}
{
  <VALOR_DEFAULT> Sentencias()
}

void Prueba():
{}
{
  <PRUEBA> <NEXT> Sentencias() <FINMETODO> <PRUEBA> <FINLINEA>
}

void Atrapar():
{}
{
  <ATRAPADOR> <DOSPUNTOS> Sentencias() <FINMETODO> <ATRAPADOR> <FINLINEA>
}

void Instancia():
{}
{
    <INSTANCIA> <IDENTIFICADOR> <COMO> <NUEVO> <IDENTIFICADOR> <CORIZQ> <CORDER>
}

void Arreglos():
{}
{
  <ARREGLO> <IDENTIFICADOR> <COMO> BloqueArreglos()
}

void BloqueArreglos():
{}
{
  <CORIZQ> (AsignarCadena() | <NUMERO>) MasCadenasNumeros() <CORDER>
}

void MasCadenasNumeros():
{}
{
  (<COMA> (AsignarCadena() | <NUMERO>))*
}

void FuncionMath():
{}
{
  <MODMATH> <PUNTO> <FUNCMAT> <PARIZQ> <IDENTIFICADOR> <COMA> <NUMERO> <PARDER>
}

void AbrirArchivos():
{}
{
  <ABRIR_ARCHIVO> <PUNTO> <ARCHIVO> <PARIZQ> CadenaArchivo() <PARDER>
}

void CadenaArchivo():
{}
{
  <COMILLAS> <IDENTIFICADOR> <PUNTO> <IDENTIFICADOR> <COMILLAS>
}

void LeerArchivos():
{}
{
  <LEER_ARCHIVO> <PARIZQ> <PARDER> <FINLINEA>
}

void EntradaDatos():
{}
{
  <INPUT> <PUNTO> (<LEER_LINEA> | SalidaDatos()) <FINLINEA>
}

void SalidaDatos():
{}
{
  <ESCRIBIR> <PARIZQ> AsignarCadena() <COMA> (<NUMERO> | <IDENTIFICADOR>) <PARDER>
}
